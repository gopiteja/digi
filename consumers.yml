version: '3.6'

networks:
  service_bridge:
    name: service_bridge
    driver: overlay

services:
  # Reports
  generate_report:
    image: 'generate_report'
    container_name: 'generate_report'
    build:
      context: ./reports_api/BL/app
      dockerfile: generate_report.Dockerfile
    networks:
      - service_bridge
    restart: on-failure:3
    environment:
      - HOST_IP=${HOST_IP}
      - LOG_LEVEL=${LOG_LEVEL}
      - LOG_FORMAT=${LOG_FORMAT}
      - LOCAL_DB_PASSWORD=${LOCAL_DB_PASSWORD}
      - LOCAL_DB_USER=${LOCAL_DB_USER}
      - LOCAL_DB_PORT=${LOCAL_DB_PORT}
    volumes:
      - reports_output:/app/reports
    # logging:
    #   driver: gelf
    #   options:
    #     gelf-address: udp://127.0.0.1:12201
    #     tag: "generate_report_tag"
        
  # Digital Signature
  digital_signature:
    image: 'digital_signature'
    container_name: 'digital_signature'
    build: ./digital_signature_api/BL
    networks:
      - service_bridge
    restart: on-failure:3
    environment:
      - HOST_IP=${HOST_IP}
      - LOG_LEVEL=${LOG_LEVEL}
      - LOG_FORMAT=${LOG_FORMAT}
      - LOCAL_DB_PASSWORD=${LOCAL_DB_PASSWORD}
      - LOCAL_DB_USER=${LOCAL_DB_USER}
      - LOCAL_DB_PORT=${LOCAL_DB_PORT}
    volumes:
      - files:/app/files
    # logging:
    #   driver: gelf
    #   options:
    #     gelf-address: udp://127.0.0.1:12201
    #     tag: "digital_signature_tag"

  # Template Detection
  detection_app:
    image: 'detection_app'
    container_name: 'detection_app'
    build: ./template_detection/BL
    networks:
      - service_bridge
    volumes:
      - detection_input:/app/input
      - angular:/app/angular
      - training_images:/app/training_ui
    restart: on-failure:3
    environment:
      - HOST_IP=${HOST_IP}
      - LOG_LEVEL=${LOG_LEVEL}
      - LOG_FORMAT=${LOG_FORMAT}
      - LOCAL_DB_PASSWORD=${LOCAL_DB_PASSWORD}
      - LOCAL_DB_USER=${LOCAL_DB_USER}
      - LOCAL_DB_PORT=${LOCAL_DB_PORT}
    # logging:
    #   driver: gelf
    #   options:
    #     gelf-address: udp://127.0.0.1:12201
    #     tag: "detection_app_tag"

  # Extraction
  extraction:
    image: 'extraction'
    container_name: 'extraction'
    build:
      context: ./extraction_api/BL/app
      dockerfile: consumer.Dockerfile
    networks:
      - service_bridge
    restart: on-failure:3
    environment:
      - HOST_IP=${HOST_IP}
      - LOG_LEVEL=${LOG_LEVEL}
      - LOG_FORMAT=${LOG_FORMAT}
      - LOCAL_DB_PASSWORD=${LOCAL_DB_PASSWORD}
      - LOCAL_DB_USER=${LOCAL_DB_USER}
      - LOCAL_DB_PORT=${LOCAL_DB_PORT}
    volumes:
      - invoice_files:/app/invoice_files
    # logging:
    #   driver: gelf
    #   options:
    #     gelf-address: udp://127.0.0.1:12201
    #     tag: "extraction_tag"

  table_consumer:
    image: 'table_consumer'
    container_name: 'table_consumer'
    build:
      context: ./table_api/BL/app
      dockerfile: consumer.Dockerfile
    networks:
      - service_bridge
    restart: on-failure:3
    environment:
      - HOST_IP=${HOST_IP}
      - LOG_LEVEL=${LOG_LEVEL}
      - LOG_FORMAT=${LOG_FORMAT}
      - LOCAL_DB_PASSWORD=${LOCAL_DB_PASSWORD}
      - LOCAL_DB_USER=${LOCAL_DB_USER}
      - LOCAL_DB_PORT=${LOCAL_DB_PORT}
    volumes:
      - invoice_files:/app/invoice_files
    # logging:
    #   driver: gelf
    #   options:
    #     gelf-address: udp://127.0.0.1:12201
    #     tag: "table_consumer_tag"

  business_rules_consumer:
    image: 'business_rules_consumer'
    container_name: 'business_rules_consumer'
    build:
      context: ./business_rules_api/BL/app
      dockerfile: consumer.Dockerfile
    networks:
      - service_bridge
    restart: on-failure:3
    environment:
      - HOST_IP=${HOST_IP}
      - LOG_LEVEL=${LOG_LEVEL}
      - LOG_FORMAT=${LOG_FORMAT}
      - LOCAL_DB_PASSWORD=${LOCAL_DB_PASSWORD}
      - LOCAL_DB_USER=${LOCAL_DB_USER}
      - LOCAL_DB_PORT=${LOCAL_DB_PORT}
    # logging:
    #   driver: gelf
    #   options:
    #     gelf-address: udp://127.0.0.1:12201
    #     tag: "business_rules_consumer_tag"
  
  # Generate JSON
  generate_json:
    image: 'generate_json'
    container_name: 'generate_json'
    build:
      context: ./button_functions/app/generate_json
      dockerfile: generate_json.Dockerfile
    networks:
      service_bridge:
        aliases:
          - jsonexportapi
    volumes:
      - json_output:/app/output
    restart: on-failure:3
    environment:
      - HOST_IP=${HOST_IP}
      - LOG_LEVEL=${LOG_LEVEL}
      - LOG_FORMAT=${LOG_FORMAT}
      - LOCAL_DB_PASSWORD=${LOCAL_DB_PASSWORD}
      - LOCAL_DB_USER=${LOCAL_DB_USER}
      - LOCAL_DB_PORT=${LOCAL_DB_PORT}
    # logging:
    #   driver: gelf
    #   options:
    #     gelf-address: udp://127.0.0.1:12201
    #     tag: "table_merger_tag"

  # Table Merger
  merge_table:
    image: 'merge_table'
    container_name: 'merge_table'
    build:
      context: ./button_functions/app/merge_table
      dockerfile: merge_table.Dockerfile
    networks:
      - service_bridge
    restart: on-failure:3
    environment:
      - HOST_IP=${HOST_IP}
      - LOG_LEVEL=${LOG_LEVEL}
      - LOG_FORMAT=${LOG_FORMAT}
      - LOCAL_DB_PASSWORD=${LOCAL_DB_PASSWORD}
      - LOCAL_DB_USER=${LOCAL_DB_USER}
      - LOCAL_DB_PORT=${LOCAL_DB_PORT}
    # logging:
    #   driver: gelf
    #   options:
    #     gelf-address: udp://127.0.0.1:12201
    #     tag: "merge_table_tag"

  # Save Changes
  save_changes:
    image: 'save_changes'
    container_name: 'save_changes'
    build:
      context: ./button_functions/app/save_changes
      dockerfile: save_changes.Dockerfile
    networks:
      - service_bridge
    restart: on-failure:3
    environment:
      - HOST_IP=${HOST_IP}
      - LOG_LEVEL=${LOG_LEVEL}
      - LOG_FORMAT=${LOG_FORMAT}
      - LOCAL_DB_PASSWORD=${LOCAL_DB_PASSWORD}
      - LOCAL_DB_USER=${LOCAL_DB_USER}
      - LOCAL_DB_PORT=${LOCAL_DB_PORT}
    # logging:
    #   driver: gelf
    #   options:
    #     gelf-address: udp://127.0.0.1:12201
    #     tag: "save_changes_tag"

  # Update Queue
  update_queue:
    image: 'update_queue'
    container_name: 'update_queue'
    build:
      context: ./button_functions/app/update_queue
      dockerfile: update_queue.Dockerfile
    networks:
      - service_bridge
    restart: on-failure:3
    environment:
      - HOST_IP=${HOST_IP}
      - LOG_LEVEL=${LOG_LEVEL}
      - LOG_FORMAT=${LOG_FORMAT}
      - LOCAL_DB_PASSWORD=${LOCAL_DB_PASSWORD}
      - LOCAL_DB_USER=${LOCAL_DB_USER}
      - LOCAL_DB_PORT=${LOCAL_DB_PORT}
    # logging:
    #   driver: gelf
    #   options:
    #     gelf-address: udp://127.0.0.1:12201
    #     tag: "update_queue_tag"

  # Case Creation
  case_creation:
    image: 'case_creation'
    container_name: 'case_creation'
    build:
      context: ./queue_api/BL/app
      dockerfile: case_creation.Dockerfile
    networks:
      - service_bridge
    restart: on-failure:3
    environment:
      - HOST_IP=${HOST_IP}
      - LOG_LEVEL=${LOG_LEVEL}
      - LOG_FORMAT=${LOG_FORMAT}
      - LOCAL_DB_PASSWORD=${LOCAL_DB_PASSWORD}
      - LOCAL_DB_USER=${LOCAL_DB_USER}
      - LOCAL_DB_PORT=${LOCAL_DB_PORT}
    volumes:
      - case_creation:/app/case_creation
    # logging:
    #   driver: gelf
    #   options:
    #     gelf-address: udp://127.0.0.1:12201
    #     tag: "case_creation_tag"

  # Run Business Rules
  run_business_rule:
    image: 'run_business_rule'
    container_name: 'run_business_rule'
    build:
      context: ./business_rules_api/BL/app
      dockerfile: run_business_rule.Dockerfile
    networks:
      - service_bridge
    restart: on-failure:3
    environment:
      - HOST_IP=${HOST_IP}
      - LOG_LEVEL=${LOG_LEVEL}
      - LOG_FORMAT=${LOG_FORMAT}
      - LOCAL_DB_PASSWORD=${LOCAL_DB_PASSWORD}
      - LOCAL_DB_USER=${LOCAL_DB_USER}
      - LOCAL_DB_PORT=${LOCAL_DB_PORT}
    # logging:
    #   driver: gelf
    #   options:
    #     gelf-address: udp://127.0.0.1:12201
    #     tag: "run_business_rule_tag"
  
  # Process Time
  process_time:
    image: 'process_time'
    container_name: 'process_time'
    build: ./process_time/BL
    networks:
      - service_bridge
    restart: on-failure:3
    environment:
      - HOST_IP=${HOST_IP}
      - LOG_LEVEL=${LOG_LEVEL}
      - LOG_FORMAT=${LOG_FORMAT}
      - LOCAL_DB_PASSWORD=${LOCAL_DB_PASSWORD}
      - LOCAL_DB_USER=${LOCAL_DB_USER}
      - LOCAL_DB_PORT=${LOCAL_DB_PORT}
    # logging:
    #   driver: gelf
    #   options:
    #     gelf-address: udp://127.0.0.1:12201
    #     tag: "process_time_tag"

  # Update Addon Table
  update_addon:
    image: 'update_addon'
    container_name: 'update_addon'
    build:
      context: ./button_functions/app/update_addon
      dockerfile: update_addon.Dockerfile
    networks:
      - service_bridge
    restart: on-failure:3
    environment:
      - HOST_IP=${HOST_IP}
      - LOG_LEVEL=${LOG_LEVEL}
      - LOG_FORMAT=${LOG_FORMAT}
      - LOCAL_DB_PASSWORD=${LOCAL_DB_PASSWORD}
      - LOCAL_DB_USER=${LOCAL_DB_USER}
      - LOCAL_DB_PORT=${LOCAL_DB_PORT}
    # logging:
    #   driver: gelf
    #   options:
    #     gelf-address: udp://127.0.0.1:12201
    #     tag: "update_addon_tag"

volumes:
  # Reports
  reports_output:
    driver: local
    name: reports_output
    driver_opts:
      type: 'none'
      o: 'bind'
      device: ${REPORT_OUTPUT_PATH}

  # JSON Export
  json_output:
    driver: local
    name: json_output
    driver_opts:
      type: 'none'
      o: 'bind'
      device: ${JSON_EXPORT_PATH}

  # Case Creation
  case_creation:
    driver: local
    name: case_creation
    driver_opts:
      type: 'none'
      o: 'bind'
      device: ${XAMPP_PATH}/htdocs/
      
  # Digital Signature and ACE Template Training
  files:
    external: true
    name: file_output

  # Template Detection
  detection_input:
    external: true
    name: file_output

  angular:
    external: true
    name: angular_images

  training_images:
    external: true
    name: ui_images

  # Invoices
  invoice_files:
    external: true
    name: file_output